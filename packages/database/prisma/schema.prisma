generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                                 String       @id @default(uuid())
  name                               String?
  email                              String?      @unique
  role                               Role
  created_at                         DateTime     @default(now())
  Course                             Course[]
  enrollments                        Enrollment[]
  feedback_given                     Feedback[]   @relation("professorf")
  Feedback_Feedback_student_idToUser Feedback[]   @relation("Feedback_student_idToUser")
  grades_given                       Grade[]      @relation("professorg")
  grades_received                    Grade[]      @relation("studentg")
  submissions                        Submission[]
}

model Course {
  id          String       @id @default(uuid())
  created_at  DateTime     @default(now())
  name        String?
  description String?
  owner_id    String
  owner       User         @relation(fields: [owner_id], references: [id])
  enrollments Enrollment[]
  assignments Assignment[] @relation("AssignmentToCourse")

  @@unique([name, owner_id])
}

model Assignment {
  id           String         @id @default(uuid())
  created_at   DateTime       @default(now())
  title        String
  due_by       DateTime
  instructions String
  type         AssignmentType
  submissions  Submission[]
  courses      Course[]       @relation("AssignmentToCourse")

  @@unique([title, due_by])
}

model Submission {
  id            String         @id @default(uuid())
  submitted_at  DateTime       @default(now())
  assignment_id String
  content       String
  type          AssignmentType
  owner_id      String
  feedbacks     Feedback[]
  grades        Grade[]
  assignment    Assignment     @relation(fields: [assignment_id], references: [id])
  owner         User           @relation(fields: [owner_id], references: [id])

  @@unique([assignment_id, owner_id])
}

model Grade {
  id            String     @id @default(uuid())
  graded_at     DateTime   @default(now())
  submission_id String
  score         Float
  feedback      String
  grader_id     String
  student_id    String
  teacher       User       @relation("professorg", fields: [grader_id], references: [id])
  student       User       @relation("studentg", fields: [student_id], references: [id])
  submission    Submission @relation(fields: [submission_id], references: [id])

  @@unique([submission_id, student_id])
}

model Enrollment {
  id          String   @id @default(uuid())
  user_id     String
  course_id   String
  user_role   Role
  enrolled_at DateTime @default(now())
  course      Course   @relation(fields: [course_id], references: [id])
  user        User     @relation(fields: [user_id], references: [id])

  @@unique([user_id, course_id])
}

model Feedback {
  id                             String     @id @default(uuid())
  created_at                     DateTime   @default(now())
  submission_id                  String
  content                        String
  professor_id                   String
  student_id                     String
  professor                      User       @relation("professorf", fields: [professor_id], references: [id])
  User_Feedback_student_idToUser User       @relation("Feedback_student_idToUser", fields: [student_id], references: [id])
  submission                     Submission @relation(fields: [submission_id], references: [id])

  @@unique([submission_id, student_id, professor_id])
}

enum Role {
  STUDENT
  PROFESSOR
  ADMIN
}

enum AssignmentType {
  QUIZ
  UPLOAD
  PEER
}
