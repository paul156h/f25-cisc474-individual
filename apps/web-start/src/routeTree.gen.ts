/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SubmissionRouteImport } from './routes/submission'
import { Route as GradesRouteImport } from './routes/grades'
import { Route as AssignmentsRouteImport } from './routes/assignments'
import { Route as AssignmentRouteImport } from './routes/assignment'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CoursesIndexRouteImport } from './routes/courses/index'
import { Route as CoursesCourseIdRouteImport } from './routes/courses/$courseId'

const SubmissionRoute = SubmissionRouteImport.update({
  id: '/submission',
  path: '/submission',
  getParentRoute: () => rootRouteImport,
} as any)
const GradesRoute = GradesRouteImport.update({
  id: '/grades',
  path: '/grades',
  getParentRoute: () => rootRouteImport,
} as any)
const AssignmentsRoute = AssignmentsRouteImport.update({
  id: '/assignments',
  path: '/assignments',
  getParentRoute: () => rootRouteImport,
} as any)
const AssignmentRoute = AssignmentRouteImport.update({
  id: '/assignment',
  path: '/assignment',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CoursesIndexRoute = CoursesIndexRouteImport.update({
  id: '/courses/',
  path: '/courses/',
  getParentRoute: () => rootRouteImport,
} as any)
const CoursesCourseIdRoute = CoursesCourseIdRouteImport.update({
  id: '/courses/$courseId',
  path: '/courses/$courseId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/assignment': typeof AssignmentRoute
  '/assignments': typeof AssignmentsRoute
  '/grades': typeof GradesRoute
  '/submission': typeof SubmissionRoute
  '/courses/$courseId': typeof CoursesCourseIdRoute
  '/courses': typeof CoursesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/assignment': typeof AssignmentRoute
  '/assignments': typeof AssignmentsRoute
  '/grades': typeof GradesRoute
  '/submission': typeof SubmissionRoute
  '/courses/$courseId': typeof CoursesCourseIdRoute
  '/courses': typeof CoursesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/assignment': typeof AssignmentRoute
  '/assignments': typeof AssignmentsRoute
  '/grades': typeof GradesRoute
  '/submission': typeof SubmissionRoute
  '/courses/$courseId': typeof CoursesCourseIdRoute
  '/courses/': typeof CoursesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/assignment'
    | '/assignments'
    | '/grades'
    | '/submission'
    | '/courses/$courseId'
    | '/courses'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/assignment'
    | '/assignments'
    | '/grades'
    | '/submission'
    | '/courses/$courseId'
    | '/courses'
  id:
    | '__root__'
    | '/'
    | '/assignment'
    | '/assignments'
    | '/grades'
    | '/submission'
    | '/courses/$courseId'
    | '/courses/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AssignmentRoute: typeof AssignmentRoute
  AssignmentsRoute: typeof AssignmentsRoute
  GradesRoute: typeof GradesRoute
  SubmissionRoute: typeof SubmissionRoute
  CoursesCourseIdRoute: typeof CoursesCourseIdRoute
  CoursesIndexRoute: typeof CoursesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/submission': {
      id: '/submission'
      path: '/submission'
      fullPath: '/submission'
      preLoaderRoute: typeof SubmissionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/grades': {
      id: '/grades'
      path: '/grades'
      fullPath: '/grades'
      preLoaderRoute: typeof GradesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/assignments': {
      id: '/assignments'
      path: '/assignments'
      fullPath: '/assignments'
      preLoaderRoute: typeof AssignmentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/assignment': {
      id: '/assignment'
      path: '/assignment'
      fullPath: '/assignment'
      preLoaderRoute: typeof AssignmentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses/': {
      id: '/courses/'
      path: '/courses'
      fullPath: '/courses'
      preLoaderRoute: typeof CoursesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses/$courseId': {
      id: '/courses/$courseId'
      path: '/courses/$courseId'
      fullPath: '/courses/$courseId'
      preLoaderRoute: typeof CoursesCourseIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AssignmentRoute: AssignmentRoute,
  AssignmentsRoute: AssignmentsRoute,
  GradesRoute: GradesRoute,
  SubmissionRoute: SubmissionRoute,
  CoursesCourseIdRoute: CoursesCourseIdRoute,
  CoursesIndexRoute: CoursesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
